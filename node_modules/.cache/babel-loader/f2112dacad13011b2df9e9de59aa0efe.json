{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useCallback, useContext, useState } from \"react\"\n// import { AppContext } from \"../utils/context\"\n// export function useWrappedRequest() {\n//   const [loading, setLoading] = useState(false)\n//   const { setError } = useContext(AppContext)\n//   const wrappedRequest = useCallback(\n//     async <TData extends any = void>(promise: () => Promise<TData>): Promise<TData | null> => {\n//       try {\n//         setLoading(true)\n//         const result = await promise()\n//         return result\n//       } catch (error) {\n//         setError(error as string)\n//         return null\n//       } finally {\n//         setLoading(false)\n//       }\n//     },\n//     [setError]\n//   )\n//   return { loading, wrappedRequest }\n// }\nimport { useCallback, useContext, useState } from \"react\";\nimport { AppContext } from \"../utils/context\";\nexport function useWrappedRequest() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const {\n    setError\n  } = useContext(AppContext);\n  const wrappedRequest = useCallback(async promise => {\n    try {\n      setLoading(true);\n      await promise();\n    } catch (error) {\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [setError]);\n  return {\n    loading,\n    wrappedRequest\n  };\n}\n\n_s(useWrappedRequest, \"UpnfxKvL89/2lQjaDsJx6EcANJM=\");","map":{"version":3,"names":["useCallback","useContext","useState","AppContext","useWrappedRequest","loading","setLoading","setError","wrappedRequest","promise","error"],"sources":["/home/uddhav/Downloads/ramp second try/src/hooks/useWrappedRequest.ts"],"sourcesContent":["// import { useCallback, useContext, useState } from \"react\"\n// import { AppContext } from \"../utils/context\"\n\n// export function useWrappedRequest() {\n//   const [loading, setLoading] = useState(false)\n//   const { setError } = useContext(AppContext)\n\n//   const wrappedRequest = useCallback(\n//     async <TData extends any = void>(promise: () => Promise<TData>): Promise<TData | null> => {\n//       try {\n//         setLoading(true)\n//         const result = await promise()\n//         return result\n//       } catch (error) {\n//         setError(error as string)\n//         return null\n//       } finally {\n//         setLoading(false)\n//       }\n//     },\n//     [setError]\n//   )\n\n//   return { loading, wrappedRequest }\n// }\n\nimport { useCallback, useContext, useState } from \"react\"\nimport { AppContext } from \"../utils/context\"\n\nexport function useWrappedRequest() {\n  const [loading, setLoading] = useState(false)\n  const { setError } = useContext(AppContext)\n\n  const wrappedRequest = useCallback(\n    async (promise: () => Promise<void>) => {\n      try {\n        setLoading(true)\n        await promise()\n      } catch (error) {\n        setError(error as string)\n      } finally {\n        setLoading(false)\n      }\n    },\n    [setError]\n  )\n\n  return { loading, wrappedRequest }\n}\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,QAAlC,QAAkD,OAAlD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,SAASC,iBAAT,GAA6B;EAAA;;EAClC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM;IAAEK;EAAF,IAAeN,UAAU,CAACE,UAAD,CAA/B;EAEA,MAAMK,cAAc,GAAGR,WAAW,CAChC,MAAOS,OAAP,IAAwC;IACtC,IAAI;MACFH,UAAU,CAAC,IAAD,CAAV;MACA,MAAMG,OAAO,EAAb;IACD,CAHD,CAGE,OAAOC,KAAP,EAAc;MACdH,QAAQ,CAACG,KAAD,CAAR;IACD,CALD,SAKU;MACRJ,UAAU,CAAC,KAAD,CAAV;IACD;EACF,CAV+B,EAWhC,CAACC,QAAD,CAXgC,CAAlC;EAcA,OAAO;IAAEF,OAAF;IAAWG;EAAX,CAAP;AACD;;GAnBeJ,iB"},"metadata":{},"sourceType":"module"}